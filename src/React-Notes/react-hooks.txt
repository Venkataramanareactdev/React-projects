What are Hooks in React?
Hooks are special functions introduced in React 16.8 that let you use state,
lifecycle methods, context, etc., in functional components. 
Before hooks, you could only use state and lifecycle methods
in class components.

Why Hooks?
Avoid class components complexity.
Enable code reuse across components.
Make components simpler, more readable, and easier to test.
Organize logic by concern rather than lifecycle methods.

Core Rules of Hooks:
Only call hooks at the top level.
(not inside loops, conditions, or nested functions).
Only call hooks from React functions. 
(either functional components or custom hooks).

Step 1 â€“ Component renders useState
React starts rendering a functional component.
Hooks are called in order, exactly the same on every render.

const [count, setCount] = useState(0);
Initializes state (0 in this case).
count holds the current value.
setCount is used to update the value and trigger re-render.

Step-2 - useEffect:
On the first render, the state is initialized with the provided value.
On subsequent renders, React retrieves the existing state from memory.

Example:
useEffect(() => {
  console.log("Component mounted or updated");

  return () => {
    console.log("Cleanup before re-render or unmounting");
  };
}, [count]);
Runs after render.

Dependencies control when it runs ([] = only once, [count] = when count changes).

useContext:
const theme = useContext(ThemeContext);
Accesses context values without needing a wrapper component.